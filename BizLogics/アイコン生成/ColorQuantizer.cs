using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

namespace ColorManager
{
    /// <summary>
    /// インデックスカラーのピクセル設定用デレゲート
    /// </summary>
    /// <param name="data">入力BitmapData</param>
    /// <param name="x">X座標</param>
    /// <param name="y">Y座標</param>
    /// <param name="index">カラーインデックス</param>
    public delegate void SetPixelIndexDelegate(BitmapData aBitmapData, int aX, int aY, byte aIndex);

    /// <summary>
    /// 色数の列挙体
    /// </summary>
    public enum EDepth
    {
        DEPTH_1BIT = 1,
        DEPTH_4BIT = 4,
        DEPTH_8BIT = 8,
        DEPTH_16BIT = 16,
        DEPTH_24BIT = 24,
        DEPTH_32BIT = 32,
    }

    /// <summary>
    /// パレット種別
    /// </summary>
    public enum EPalleteType
    {
        SYS_WIN,
        SYS_WIN_PAINT,
        WEB_SAFE,
        CUSTOM
    }

    /// <summary>
    /// カラークォンタイズクラス
    /// </summary>
    public class ColorQuantizer
    {
        /// <summary>
        /// 色数
        /// </summary>
        protected EDepth depth;

        /// <summary>
        /// パレット種別
        /// </summary>
        protected EPalleteType palleteType;

        /// <summary>
        /// カスタムパレット
        /// </summary>
        protected byte[,] customPallete;

        /// <summary>
        /// 誤差拡散
        /// </summary>
        protected bool errorDiffusion;

        /// <summary>
        /// 透過しきい値
        /// </summary>
        protected byte transparentThreshold;

        /// <summary>
        /// 処理パレット
        /// </summary>
        protected static byte[,] pal_proc;

        /// <summary>
        /// パレット長
        /// </summary>
        protected static int paletteLength;

        /// <summary>
        /// ビットデータ保持用バッファ
        /// </summary>
        protected static byte bitBuffer;

        /// <summary>
        /// インデックスカラーのピクセル設定用デレゲート
        /// </summary>
        protected static SetPixelIndexDelegate setPixelIndexDelegate;

        #region pal_8bit_Sys_Win

        protected static byte[,] pal_8bit_Sys_Win =
        {
            { 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x80, 0x00, 0x00 },
            { 0x00, 0x00, 0x80, 0x00 },
            { 0x00, 0x80, 0x80, 0x00 },
            { 0x00, 0x00, 0x00, 0x80 },
            { 0x00, 0x80, 0x00, 0x80 },
            { 0x00, 0x00, 0x80, 0x80 },
            { 0x00, 0x80, 0x80, 0x80 },
            { 0x00, 0xC0, 0xDC, 0xC0 },
            { 0x00, 0xA6, 0xCA, 0xF0 },
            { 0x00, 0x2A, 0x3F, 0xAA },
            { 0x00, 0x2A, 0x3F, 0xFF },
            { 0x00, 0x2A, 0x5F, 0x00 },
            { 0x00, 0x2A, 0x5F, 0x55 },
            { 0x00, 0x2A, 0x5F, 0xAA },
            { 0x00, 0x2A, 0x5F, 0xFF },
            { 0x00, 0x2A, 0x7F, 0x00 },
            { 0x00, 0x2A, 0x7F, 0x55 },
            { 0x00, 0x2A, 0x7F, 0xAA },
            { 0x00, 0x2A, 0x7F, 0xFF },
            { 0x00, 0x2A, 0x9F, 0x00 },
            { 0x00, 0x2A, 0x9F, 0x55 },
            { 0x00, 0x2A, 0x9F, 0xAA },
            { 0x00, 0x2A, 0x9F, 0xFF },
            { 0x00, 0x2A, 0xBF, 0x00 },
            { 0x00, 0x2A, 0xBF, 0x55 },
            { 0x00, 0x2A, 0xBF, 0xAA },
            { 0x00, 0x2A, 0xBF, 0xFF },
            { 0x00, 0x2A, 0xDF, 0x00 },
            { 0x00, 0x2A, 0xDF, 0x55 },
            { 0x00, 0x2A, 0xDF, 0xAA },
            { 0x00, 0x2A, 0xDF, 0xFF },
            { 0x00, 0x2A, 0xFF, 0x00 },
            { 0x00, 0x2A, 0xFF, 0x55 },
            { 0x00, 0x2A, 0xFF, 0xAA },
            { 0x00, 0x2A, 0xFF, 0xFF },
            { 0x00, 0x55, 0x00, 0x00 },
            { 0x00, 0x55, 0x00, 0x55 },
            { 0x00, 0x55, 0x00, 0xAA },
            { 0x00, 0x55, 0x00, 0xFF },
            { 0x00, 0x55, 0x1F, 0x00 },
            { 0x00, 0x55, 0x1F, 0x55 },
            { 0x00, 0x55, 0x1F, 0xAA },
            { 0x00, 0x55, 0x1F, 0xFF },
            { 0x00, 0x55, 0x3F, 0x00 },
            { 0x00, 0x55, 0x3F, 0x55 },
            { 0x00, 0x55, 0x3F, 0xAA },
            { 0x00, 0x55, 0x3F, 0xFF },
            { 0x00, 0x55, 0x5F, 0x00 },
            { 0x00, 0x55, 0x5F, 0x55 },
            { 0x00, 0x55, 0x5F, 0xAA },
            { 0x00, 0x55, 0x5F, 0xFF },
            { 0x00, 0x55, 0x7F, 0x00 },
            { 0x00, 0x55, 0x7F, 0x55 },
            { 0x00, 0x55, 0x7F, 0xAA },
            { 0x00, 0x55, 0x7F, 0xFF },
            { 0x00, 0x55, 0x9F, 0x00 },
            { 0x00, 0x55, 0x9F, 0x55 },
            { 0x00, 0x55, 0x9F, 0xAA },
            { 0x00, 0x55, 0x9F, 0xFF },
            { 0x00, 0x55, 0xBF, 0x00 },
            { 0x00, 0x55, 0xBF, 0x55 },
            { 0x00, 0x55, 0xBF, 0xAA },
            { 0x00, 0x55, 0xBF, 0xFF },
            { 0x00, 0x55, 0xDF, 0x00 },
            { 0x00, 0x55, 0xDF, 0x55 },
            { 0x00, 0x55, 0xDF, 0xAA },
            { 0x00, 0x55, 0xDF, 0xFF },
            { 0x00, 0x55, 0xFF, 0x00 },
            { 0x00, 0x55, 0xFF, 0x55 },
            { 0x00, 0x55, 0xFF, 0xAA },
            { 0x00, 0x55, 0xFF, 0xFF },
            { 0x00, 0x7F, 0x00, 0x00 },
            { 0x00, 0x7F, 0x00, 0x55 },
            { 0x00, 0x7F, 0x00, 0xAA },
            { 0x00, 0x7F, 0x00, 0xFF },
            { 0x00, 0x7F, 0x1F, 0x00 },
            { 0x00, 0x7F, 0x1F, 0x55 },
            { 0x00, 0x7F, 0x1F, 0xAA },
            { 0x00, 0x7F, 0x1F, 0xFF },
            { 0x00, 0x7F, 0x3F, 0x00 },
            { 0x00, 0x7F, 0x3F, 0x55 },
            { 0x00, 0x7F, 0x3F, 0xAA },
            { 0x00, 0x7F, 0x3F, 0xFF },
            { 0x00, 0x7F, 0x5F, 0x00 },
            { 0x00, 0x7F, 0x5F, 0x55 },
            { 0x00, 0x7F, 0x5F, 0xAA },
            { 0x00, 0x7F, 0x5F, 0xFF },
            { 0x00, 0x7F, 0x7F, 0x00 },
            { 0x00, 0x7F, 0x7F, 0x55 },
            { 0x00, 0x7F, 0x7F, 0xAA },
            { 0x00, 0x7F, 0x7F, 0xFF },
            { 0x00, 0x7F, 0x9F, 0x00 },
            { 0x00, 0x7F, 0x9F, 0x55 },
            { 0x00, 0x7F, 0x9F, 0xAA },
            { 0x00, 0x7F, 0x9F, 0xFF },
            { 0x00, 0x7F, 0xBF, 0x00 },
            { 0x00, 0x7F, 0xBF, 0x55 },
            { 0x00, 0x7F, 0xBF, 0xAA },
            { 0x00, 0x7F, 0xBF, 0xFF },
            { 0x00, 0x7F, 0xDF, 0x00 },
            { 0x00, 0x7F, 0xDF, 0x55 },
            { 0x00, 0x7F, 0xDF, 0xAA },
            { 0x00, 0x7F, 0xDF, 0xFF },
            { 0x00, 0x7F, 0xFF, 0x00 },
            { 0x00, 0x7F, 0xFF, 0x55 },
            { 0x00, 0x7F, 0xFF, 0xAA },
            { 0x00, 0x7F, 0xFF, 0xFF },
            { 0x00, 0xAA, 0x00, 0x00 },
            { 0x00, 0xAA, 0x00, 0x55 },
            { 0x00, 0xAA, 0x00, 0xAA },
            { 0x00, 0xAA, 0x00, 0xFF },
            { 0x00, 0xAA, 0x1F, 0x00 },
            { 0x00, 0xAA, 0x1F, 0x55 },
            { 0x00, 0xAA, 0x1F, 0xAA },
            { 0x00, 0xAA, 0x1F, 0xFF },
            { 0x00, 0xAA, 0x3F, 0x00 },
            { 0x00, 0xAA, 0x3F, 0x55 },
            { 0x00, 0xAA, 0x3F, 0xAA },
            { 0x00, 0xAA, 0x3F, 0xFF },
            { 0x00, 0xAA, 0x5F, 0x00 },
            { 0x00, 0xAA, 0x5F, 0x55 },
            { 0x00, 0xAA, 0x5F, 0xAA },
            { 0x00, 0xAA, 0x5F, 0xFF },
            { 0x00, 0xAA, 0x7F, 0x00 },
            { 0x00, 0xAA, 0x7F, 0x55 },
            { 0x00, 0xAA, 0x7F, 0xAA },
            { 0x00, 0xAA, 0x7F, 0xFF },
            { 0x00, 0xAA, 0x9F, 0x00 },
            { 0x00, 0xAA, 0x9F, 0x55 },
            { 0x00, 0xAA, 0x9F, 0xAA },
            { 0x00, 0xAA, 0x9F, 0xFF },
            { 0x00, 0xAA, 0xBF, 0x00 },
            { 0x00, 0xAA, 0xBF, 0x55 },
            { 0x00, 0xAA, 0xBF, 0xAA },
            { 0x00, 0xAA, 0xBF, 0xFF },
            { 0x00, 0xAA, 0xDF, 0x00 },
            { 0x00, 0xAA, 0xDF, 0x55 },
            { 0x00, 0xAA, 0xDF, 0xAA },
            { 0x00, 0xAA, 0xDF, 0xFF },
            { 0x00, 0xAA, 0xFF, 0x00 },
            { 0x00, 0xAA, 0xFF, 0x55 },
            { 0x00, 0xAA, 0xFF, 0xAA },
            { 0x00, 0xAA, 0xFF, 0xFF },
            { 0x00, 0xD4, 0x00, 0x00 },
            { 0x00, 0xD4, 0x00, 0x55 },
            { 0x00, 0xD4, 0x00, 0xAA },
            { 0x00, 0xD4, 0x00, 0xFF },
            { 0x00, 0xD4, 0x1F, 0x00 },
            { 0x00, 0xD4, 0x1F, 0x55 },
            { 0x00, 0xD4, 0x1F, 0xAA },
            { 0x00, 0xD4, 0x1F, 0xFF },
            { 0x00, 0xD4, 0x3F, 0x00 },
            { 0x00, 0xD4, 0x3F, 0x55 },
            { 0x00, 0xD4, 0x3F, 0xAA },
            { 0x00, 0xD4, 0x3F, 0xFF },
            { 0x00, 0xD4, 0x5F, 0x00 },
            { 0x00, 0xD4, 0x5F, 0x55 },
            { 0x00, 0xD4, 0x5F, 0xAA },
            { 0x00, 0xD4, 0x5F, 0xFF },
            { 0x00, 0xD4, 0x7F, 0x00 },
            { 0x00, 0xD4, 0x7F, 0x55 },
            { 0x00, 0xD4, 0x7F, 0xAA },
            { 0x00, 0xD4, 0x7F, 0xFF },
            { 0x00, 0xD4, 0x9F, 0x00 },
            { 0x00, 0xD4, 0x9F, 0x55 },
            { 0x00, 0xD4, 0x9F, 0xAA },
            { 0x00, 0xD4, 0x9F, 0xFF },
            { 0x00, 0xD4, 0xBF, 0x00 },
            { 0x00, 0xD4, 0xBF, 0x55 },
            { 0x00, 0xD4, 0xBF, 0xAA },
            { 0x00, 0xD4, 0xBF, 0xFF },
            { 0x00, 0xD4, 0xDF, 0x00 },
            { 0x00, 0xD4, 0xDF, 0x55 },
            { 0x00, 0xD4, 0xDF, 0xAA },
            { 0x00, 0xD4, 0xDF, 0xFF },
            { 0x00, 0xD4, 0xFF, 0x00 },
            { 0x00, 0xD4, 0xFF, 0x55 },
            { 0x00, 0xD4, 0xFF, 0xAA },
            { 0x00, 0xD4, 0xFF, 0xFF },
            { 0x00, 0xFF, 0x00, 0x55 },
            { 0x00, 0xFF, 0x00, 0xAA },
            { 0x00, 0xFF, 0x1F, 0x00 },
            { 0x00, 0xFF, 0x1F, 0x55 },
            { 0x00, 0xFF, 0x1F, 0xAA },
            { 0x00, 0xFF, 0x1F, 0xFF },
            { 0x00, 0xFF, 0x3F, 0x00 },
            { 0x00, 0xFF, 0x3F, 0x55 },
            { 0x00, 0xFF, 0x3F, 0xAA },
            { 0x00, 0xFF, 0x3F, 0xFF },
            { 0x00, 0xFF, 0x5F, 0x00 },
            { 0x00, 0xFF, 0x5F, 0x55 },
            { 0x00, 0xFF, 0x5F, 0xAA },
            { 0x00, 0xFF, 0x5F, 0xFF },
            { 0x00, 0xFF, 0x7F, 0x00 },
            { 0x00, 0xFF, 0x7F, 0x55 },
            { 0x00, 0xFF, 0x7F, 0xAA },
            { 0x00, 0xFF, 0x7F, 0xFF },
            { 0x00, 0xFF, 0x9F, 0x00 },
            { 0x00, 0xFF, 0x9F, 0x55 },
            { 0x00, 0xFF, 0x9F, 0xAA },
            { 0x00, 0xFF, 0x9F, 0xFF },
            { 0x00, 0xFF, 0xBF, 0x00 },
            { 0x00, 0xFF, 0xBF, 0x55 },
            { 0x00, 0xFF, 0xBF, 0xAA },
            { 0x00, 0xFF, 0xBF, 0xFF },
            { 0x00, 0xFF, 0xDF, 0x00 },
            { 0x00, 0xFF, 0xDF, 0x55 },
            { 0x00, 0xFF, 0xDF, 0xAA },
            { 0x00, 0xFF, 0xDF, 0xFF },
            { 0x00, 0xFF, 0xFF, 0x55 },
            { 0x00, 0xFF, 0xFF, 0xAA },
            { 0x00, 0xCC, 0xCC, 0xFF },
            { 0x00, 0xFF, 0xCC, 0xFF },
            { 0x00, 0x33, 0xFF, 0xFF },
            { 0x00, 0x66, 0xFF, 0xFF },
            { 0x00, 0x99, 0xFF, 0xFF },
            { 0x00, 0xCC, 0xFF, 0xFF },
            { 0x00, 0x00, 0x7F, 0x00 },
            { 0x00, 0x00, 0x7F, 0x55 },
            { 0x00, 0x00, 0x7F, 0xAA },
            { 0x00, 0x00, 0x7F, 0xFF },
            { 0x00, 0x00, 0x9F, 0x00 },
            { 0x00, 0x00, 0x9F, 0x55 },
            { 0x00, 0x00, 0x9F, 0xAA },
            { 0x00, 0x00, 0x9F, 0xFF },
            { 0x00, 0x00, 0xBF, 0x00 },
            { 0x00, 0x00, 0xBF, 0x55 },
            { 0x00, 0x00, 0xBF, 0xAA },
            { 0x00, 0x00, 0xBF, 0xFF },
            { 0x00, 0x00, 0xDF, 0x00 },
            { 0x00, 0x00, 0xDF, 0x55 },
            { 0x00, 0x00, 0xDF, 0xAA },
            { 0x00, 0x00, 0xDF, 0xFF },
            { 0x00, 0x00, 0xFF, 0x55 },
            { 0x00, 0x00, 0xFF, 0xAA },
            { 0x00, 0x2A, 0x00, 0x00 },
            { 0x00, 0x2A, 0x00, 0x55 },
            { 0x00, 0x2A, 0x00, 0xAA },
            { 0x00, 0x2A, 0x00, 0xFF },
            { 0x00, 0x2A, 0x1F, 0x00 },
            { 0x00, 0x2A, 0x1F, 0x55 },
            { 0x00, 0x2A, 0x1F, 0xAA },
            { 0x00, 0x2A, 0x1F, 0xFF },
            { 0x00, 0x2A, 0x3F, 0x00 },
            { 0x00, 0x2A, 0x3F, 0x55 },
            { 0x00, 0xFF, 0xFB, 0xF0 },
            { 0x00, 0xA0, 0xA0, 0xA4 },
            { 0x00, 0x80, 0x80, 0x80 },
            { 0x00, 0xFF, 0x00, 0x00 },
            { 0x00, 0x00, 0xFF, 0x00 },
            { 0x00, 0xFF, 0xFF, 0x00 },
            { 0x00, 0x00, 0x00, 0xFF },
            { 0x00, 0xFF, 0x00, 0xFF },
            { 0x00, 0x00, 0xFF, 0xFF },
            { 0x00, 0xFF, 0xFF, 0xFF }
        };

        #endregion pal_8bit_Sys_Win

        #region pal_8bit_Sys_Win_Paint

        protected static byte[,] pal_8bit_Sys_Win_Paint =
        {
            { 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x80, 0x00, 0x00 },
            { 0x00, 0x00, 0x80, 0x00 },
            { 0x00, 0x80, 0x80, 0x00 },
            { 0x00, 0x00, 0x00, 0x80 },
            { 0x00, 0x80, 0x00, 0x80 },
            { 0x00, 0x00, 0x80, 0x80 },
            { 0x00, 0xC0, 0xC0, 0xC0 },
            { 0x00, 0xC0, 0xDC, 0xC0 },
            { 0x00, 0xA6, 0xCA, 0xF0 },
            { 0x00, 0x40, 0x20, 0x00 },
            { 0x00, 0x60, 0x20, 0x00 },
            { 0x00, 0x80, 0x20, 0x00 },
            { 0x00, 0xA0, 0x20, 0x00 },
            { 0x00, 0xC0, 0x20, 0x00 },
            { 0x00, 0xE0, 0x20, 0x00 },
            { 0x00, 0x00, 0x40, 0x00 },
            { 0x00, 0x20, 0x40, 0x00 },
            { 0x00, 0x40, 0x40, 0x00 },
            { 0x00, 0x60, 0x40, 0x00 },
            { 0x00, 0x80, 0x40, 0x00 },
            { 0x00, 0xA0, 0x40, 0x00 },
            { 0x00, 0xC0, 0x40, 0x00 },
            { 0x00, 0xE0, 0x40, 0x00 },
            { 0x00, 0x00, 0x60, 0x00 },
            { 0x00, 0x20, 0x60, 0x00 },
            { 0x00, 0x40, 0x60, 0x00 },
            { 0x00, 0x60, 0x60, 0x00 },
            { 0x00, 0x80, 0x60, 0x00 },
            { 0x00, 0xA0, 0x60, 0x00 },
            { 0x00, 0xC0, 0x60, 0x00 },
            { 0x00, 0xE0, 0x60, 0x00 },
            { 0x00, 0x00, 0x80, 0x00 },
            { 0x00, 0x20, 0x80, 0x00 },
            { 0x00, 0x40, 0x80, 0x00 },
            { 0x00, 0x60, 0x80, 0x00 },
            { 0x00, 0x80, 0x80, 0x00 },
            { 0x00, 0xA0, 0x80, 0x00 },
            { 0x00, 0xC0, 0x80, 0x00 },
            { 0x00, 0xE0, 0x80, 0x00 },
            { 0x00, 0x00, 0xA0, 0x00 },
            { 0x00, 0x20, 0xA0, 0x00 },
            { 0x00, 0x40, 0xA0, 0x00 },
            { 0x00, 0x60, 0xA0, 0x00 },
            { 0x00, 0x80, 0xA0, 0x00 },
            { 0x00, 0xA0, 0xA0, 0x00 },
            { 0x00, 0xC0, 0xA0, 0x00 },
            { 0x00, 0xE0, 0xA0, 0x00 },
            { 0x00, 0x00, 0xC0, 0x00 },
            { 0x00, 0x20, 0xC0, 0x00 },
            { 0x00, 0x40, 0xC0, 0x00 },
            { 0x00, 0x60, 0xC0, 0x00 },
            { 0x00, 0x80, 0xC0, 0x00 },
            { 0x00, 0xA0, 0xC0, 0x00 },
            { 0x00, 0xC0, 0xC0, 0x00 },
            { 0x00, 0xE0, 0xC0, 0x00 },
            { 0x00, 0x00, 0xE0, 0x00 },
            { 0x00, 0x20, 0xE0, 0x00 },
            { 0x00, 0x40, 0xE0, 0x00 },
            { 0x00, 0x60, 0xE0, 0x00 },
            { 0x00, 0x80, 0xE0, 0x00 },
            { 0x00, 0xA0, 0xE0, 0x00 },
            { 0x00, 0xC0, 0xE0, 0x00 },
            { 0x00, 0xE0, 0xE0, 0x00 },
            { 0x00, 0x00, 0x00, 0x40 },
            { 0x00, 0x20, 0x00, 0x40 },
            { 0x00, 0x40, 0x00, 0x40 },
            { 0x00, 0x60, 0x00, 0x40 },
            { 0x00, 0x80, 0x00, 0x40 },
            { 0x00, 0xA0, 0x00, 0x40 },
            { 0x00, 0xC0, 0x00, 0x40 },
            { 0x00, 0xE0, 0x00, 0x40 },
            { 0x00, 0x00, 0x20, 0x40 },
            { 0x00, 0x20, 0x20, 0x40 },
            { 0x00, 0x40, 0x20, 0x40 },
            { 0x00, 0x60, 0x20, 0x40 },
            { 0x00, 0x80, 0x20, 0x40 },
            { 0x00, 0xA0, 0x20, 0x40 },
            { 0x00, 0xC0, 0x20, 0x40 },
            { 0x00, 0xE0, 0x20, 0x40 },
            { 0x00, 0x00, 0x40, 0x40 },
            { 0x00, 0x20, 0x40, 0x40 },
            { 0x00, 0x40, 0x40, 0x40 },
            { 0x00, 0x60, 0x40, 0x40 },
            { 0x00, 0x80, 0x40, 0x40 },
            { 0x00, 0xA0, 0x40, 0x40 },
            { 0x00, 0xC0, 0x40, 0x40 },
            { 0x00, 0xE0, 0x40, 0x40 },
            { 0x00, 0x00, 0x60, 0x40 },
            { 0x00, 0x20, 0x60, 0x40 },
            { 0x00, 0x40, 0x60, 0x40 },
            { 0x00, 0x60, 0x60, 0x40 },
            { 0x00, 0x80, 0x60, 0x40 },
            { 0x00, 0xA0, 0x60, 0x40 },
            { 0x00, 0xC0, 0x60, 0x40 },
            { 0x00, 0xE0, 0x60, 0x40 },
            { 0x00, 0x00, 0x80, 0x40 },
            { 0x00, 0x20, 0x80, 0x40 },
            { 0x00, 0x40, 0x80, 0x40 },
            { 0x00, 0x60, 0x80, 0x40 },
            { 0x00, 0x80, 0x80, 0x40 },
            { 0x00, 0xA0, 0x80, 0x40 },
            { 0x00, 0xC0, 0x80, 0x40 },
            { 0x00, 0xE0, 0x80, 0x40 },
            { 0x00, 0x00, 0xA0, 0x40 },
            { 0x00, 0x20, 0xA0, 0x40 },
            { 0x00, 0x40, 0xA0, 0x40 },
            { 0x00, 0x60, 0xA0, 0x40 },
            { 0x00, 0x80, 0xA0, 0x40 },
            { 0x00, 0xA0, 0xA0, 0x40 },
            { 0x00, 0xC0, 0xA0, 0x40 },
            { 0x00, 0xE0, 0xA0, 0x40 },
            { 0x00, 0x00, 0xC0, 0x40 },
            { 0x00, 0x20, 0xC0, 0x40 },
            { 0x00, 0x40, 0xC0, 0x40 },
            { 0x00, 0x60, 0xC0, 0x40 },
            { 0x00, 0x80, 0xC0, 0x40 },
            { 0x00, 0xA0, 0xC0, 0x40 },
            { 0x00, 0xC0, 0xC0, 0x40 },
            { 0x00, 0xE0, 0xC0, 0x40 },
            { 0x00, 0x00, 0xE0, 0x40 },
            { 0x00, 0x20, 0xE0, 0x40 },
            { 0x00, 0x40, 0xE0, 0x40 },
            { 0x00, 0x60, 0xE0, 0x40 },
            { 0x00, 0x80, 0xE0, 0x40 },
            { 0x00, 0xA0, 0xE0, 0x40 },
            { 0x00, 0xC0, 0xE0, 0x40 },
            { 0x00, 0xE0, 0xE0, 0x40 },
            { 0x00, 0x00, 0x00, 0x80 },
            { 0x00, 0x20, 0x00, 0x80 },
            { 0x00, 0x40, 0x00, 0x80 },
            { 0x00, 0x60, 0x00, 0x80 },
            { 0x00, 0x80, 0x00, 0x80 },
            { 0x00, 0xA0, 0x00, 0x80 },
            { 0x00, 0xC0, 0x00, 0x80 },
            { 0x00, 0xE0, 0x00, 0x80 },
            { 0x00, 0x00, 0x20, 0x80 },
            { 0x00, 0x20, 0x20, 0x80 },
            { 0x00, 0x40, 0x20, 0x80 },
            { 0x00, 0x60, 0x20, 0x80 },
            { 0x00, 0x80, 0x20, 0x80 },
            { 0x00, 0xA0, 0x20, 0x80 },
            { 0x00, 0xC0, 0x20, 0x80 },
            { 0x00, 0xE0, 0x20, 0x80 },
            { 0x00, 0x00, 0x40, 0x80 },
            { 0x00, 0x20, 0x40, 0x80 },
            { 0x00, 0x40, 0x40, 0x80 },
            { 0x00, 0x60, 0x40, 0x80 },
            { 0x00, 0x80, 0x40, 0x80 },
            { 0x00, 0xA0, 0x40, 0x80 },
            { 0x00, 0xC0, 0x40, 0x80 },
            { 0x00, 0xE0, 0x40, 0x80 },
            { 0x00, 0x00, 0x60, 0x80 },
            { 0x00, 0x20, 0x60, 0x80 },
            { 0x00, 0x40, 0x60, 0x80 },
            { 0x00, 0x60, 0x60, 0x80 },
            { 0x00, 0x80, 0x60, 0x80 },
            { 0x00, 0xA0, 0x60, 0x80 },
            { 0x00, 0xC0, 0x60, 0x80 },
            { 0x00, 0xE0, 0x60, 0x80 },
            { 0x00, 0x00, 0x80, 0x80 },
            { 0x00, 0x20, 0x80, 0x80 },
            { 0x00, 0x40, 0x80, 0x80 },
            { 0x00, 0x60, 0x80, 0x80 },
            { 0x00, 0x80, 0x80, 0x80 },
            { 0x00, 0xA0, 0x80, 0x80 },
            { 0x00, 0xC0, 0x80, 0x80 },
            { 0x00, 0xE0, 0x80, 0x80 },
            { 0x00, 0x00, 0xA0, 0x80 },
            { 0x00, 0x20, 0xA0, 0x80 },
            { 0x00, 0x40, 0xA0, 0x80 },
            { 0x00, 0x60, 0xA0, 0x80 },
            { 0x00, 0x80, 0xA0, 0x80 },
            { 0x00, 0xA0, 0xA0, 0x80 },
            { 0x00, 0xC0, 0xA0, 0x80 },
            { 0x00, 0xE0, 0xA0, 0x80 },
            { 0x00, 0x00, 0xC0, 0x80 },
            { 0x00, 0x20, 0xC0, 0x80 },
            { 0x00, 0x40, 0xC0, 0x80 },
            { 0x00, 0x60, 0xC0, 0x80 },
            { 0x00, 0x80, 0xC0, 0x80 },
            { 0x00, 0xA0, 0xC0, 0x80 },
            { 0x00, 0xC0, 0xC0, 0x80 },
            { 0x00, 0xE0, 0xC0, 0x80 },
            { 0x00, 0x00, 0xE0, 0x80 },
            { 0x00, 0x20, 0xE0, 0x80 },
            { 0x00, 0x40, 0xE0, 0x80 },
            { 0x00, 0x60, 0xE0, 0x80 },
            { 0x00, 0x80, 0xE0, 0x80 },
            { 0x00, 0xA0, 0xE0, 0x80 },
            { 0x00, 0xC0, 0xE0, 0x80 },
            { 0x00, 0xE0, 0xE0, 0x80 },
            { 0x00, 0x00, 0x00, 0xC0 },
            { 0x00, 0x20, 0x00, 0xC0 },
            { 0x00, 0x40, 0x00, 0xC0 },
            { 0x00, 0x60, 0x00, 0xC0 },
            { 0x00, 0x80, 0x00, 0xC0 },
            { 0x00, 0xA0, 0x00, 0xC0 },
            { 0x00, 0xC0, 0x00, 0xC0 },
            { 0x00, 0xE0, 0x00, 0xC0 },
            { 0x00, 0x00, 0x20, 0xC0 },
            { 0x00, 0x20, 0x20, 0xC0 },
            { 0x00, 0x40, 0x20, 0xC0 },
            { 0x00, 0x60, 0x20, 0xC0 },
            { 0x00, 0x80, 0x20, 0xC0 },
            { 0x00, 0xA0, 0x20, 0xC0 },
            { 0x00, 0xC0, 0x20, 0xC0 },
            { 0x00, 0xE0, 0x20, 0xC0 },
            { 0x00, 0x00, 0x40, 0xC0 },
            { 0x00, 0x20, 0x40, 0xC0 },
            { 0x00, 0x40, 0x40, 0xC0 },
            { 0x00, 0x60, 0x40, 0xC0 },
            { 0x00, 0x80, 0x40, 0xC0 },
            { 0x00, 0xA0, 0x40, 0xC0 },
            { 0x00, 0xC0, 0x40, 0xC0 },
            { 0x00, 0xE0, 0x40, 0xC0 },
            { 0x00, 0x00, 0x60, 0xC0 },
            { 0x00, 0x20, 0x60, 0xC0 },
            { 0x00, 0x40, 0x60, 0xC0 },
            { 0x00, 0x60, 0x60, 0xC0 },
            { 0x00, 0x80, 0x60, 0xC0 },
            { 0x00, 0xA0, 0x60, 0xC0 },
            { 0x00, 0xC0, 0x60, 0xC0 },
            { 0x00, 0xE0, 0x60, 0xC0 },
            { 0x00, 0x00, 0x80, 0xC0 },
            { 0x00, 0x20, 0x80, 0xC0 },
            { 0x00, 0x40, 0x80, 0xC0 },
            { 0x00, 0x60, 0x80, 0xC0 },
            { 0x00, 0x80, 0x80, 0xC0 },
            { 0x00, 0xA0, 0x80, 0xC0 },
            { 0x00, 0xC0, 0x80, 0xC0 },
            { 0x00, 0xE0, 0x80, 0xC0 },
            { 0x00, 0x00, 0xA0, 0xC0 },
            { 0x00, 0x20, 0xA0, 0xC0 },
            { 0x00, 0x40, 0xA0, 0xC0 },
            { 0x00, 0x60, 0xA0, 0xC0 },
            { 0x00, 0x80, 0xA0, 0xC0 },
            { 0x00, 0xA0, 0xA0, 0xC0 },
            { 0x00, 0xC0, 0xA0, 0xC0 },
            { 0x00, 0xE0, 0xA0, 0xC0 },
            { 0x00, 0x00, 0xC0, 0xC0 },
            { 0x00, 0x20, 0xC0, 0xC0 },
            { 0x00, 0x40, 0xC0, 0xC0 },
            { 0x00, 0x60, 0xC0, 0xC0 },
            { 0x00, 0x80, 0xC0, 0xC0 },
            { 0x00, 0xA0, 0xC0, 0xC0 },
            { 0x00, 0xFF, 0xFB, 0xF0 },
            { 0x00, 0xA0, 0xA0, 0xA4 },
            { 0x00, 0x80, 0x80, 0x80 },
            { 0x00, 0xFF, 0x00, 0x00 },
            { 0x00, 0x00, 0xFF, 0x00 },
            { 0x00, 0xFF, 0xFF, 0x00 },
            { 0x00, 0x00, 0x00, 0xFF },
            { 0x00, 0xFF, 0x00, 0xFF },
            { 0x00, 0x00, 0xFF, 0xFF },
            { 0x00, 0xFF, 0xFF, 0xFF }
        };

        #endregion pal_8bit_Sys_Win_Paint

        #region pal_8bit_WebSafe

        /// <summary>
        /// Webセーフカラー準拠8bitパレット
        /// </summary>
        protected static byte[,] pal_8bit_WebSafe =
        {
            { 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x00, 0x00, 0x33 },
            { 0x00, 0x00, 0x00, 0x66 },
            { 0x00, 0x00, 0x00, 0x99 },
            { 0x00, 0x00, 0x00, 0xCC },
            { 0x00, 0x00, 0x00, 0xFF },
            { 0x00, 0x00, 0x33, 0x00 },
            { 0x00, 0x00, 0x33, 0x33 },
            { 0x00, 0x00, 0x33, 0x66 },
            { 0x00, 0x00, 0x33, 0x99 },
            { 0x00, 0x00, 0x33, 0xCC },
            { 0x00, 0x00, 0x33, 0xFF },
            { 0x00, 0x00, 0x66, 0x00 },
            { 0x00, 0x00, 0x66, 0x33 },
            { 0x00, 0x00, 0x66, 0x66 },
            { 0x00, 0x00, 0x66, 0x99 },
            { 0x00, 0x00, 0x66, 0xCC },
            { 0x00, 0x00, 0x66, 0xFF },
            { 0x00, 0x00, 0x99, 0x00 },
            { 0x00, 0x00, 0x99, 0x33 },
            { 0x00, 0x00, 0x99, 0x66 },
            { 0x00, 0x00, 0x99, 0x99 },
            { 0x00, 0x00, 0x99, 0xCC },
            { 0x00, 0x00, 0x99, 0xFF },
            { 0x00, 0x00, 0xCC, 0x00 },
            { 0x00, 0x00, 0xCC, 0x33 },
            { 0x00, 0x00, 0xCC, 0x66 },
            { 0x00, 0x00, 0xCC, 0x99 },
            { 0x00, 0x00, 0xCC, 0xCC },
            { 0x00, 0x00, 0xCC, 0xFF },
            { 0x00, 0x00, 0xFF, 0x00 },
            { 0x00, 0x00, 0xFF, 0x33 },
            { 0x00, 0x00, 0xFF, 0x66 },
            { 0x00, 0x00, 0xFF, 0x99 },
            { 0x00, 0x00, 0xFF, 0xCC },
            { 0x00, 0x00, 0xFF, 0xFF },
            { 0x00, 0x33, 0x00, 0x00 },
            { 0x00, 0x33, 0x00, 0x33 },
            { 0x00, 0x33, 0x00, 0x66 },
            { 0x00, 0x33, 0x00, 0x99 },
            { 0x00, 0x33, 0x00, 0xCC },
            { 0x00, 0x33, 0x00, 0xFF },
            { 0x00, 0x33, 0x33, 0x00 },
            { 0x00, 0x33, 0x33, 0x33 },
            { 0x00, 0x33, 0x33, 0x66 },
            { 0x00, 0x33, 0x33, 0x99 },
            { 0x00, 0x33, 0x33, 0xCC },
            { 0x00, 0x33, 0x33, 0xFF },
            { 0x00, 0x33, 0x66, 0x00 },
            { 0x00, 0x33, 0x66, 0x33 },
            { 0x00, 0x33, 0x66, 0x66 },
            { 0x00, 0x33, 0x66, 0x99 },
            { 0x00, 0x33, 0x66, 0xCC },
            { 0x00, 0x33, 0x66, 0xFF },
            { 0x00, 0x33, 0x99, 0x00 },
            { 0x00, 0x33, 0x99, 0x33 },
            { 0x00, 0x33, 0x99, 0x66 },
            { 0x00, 0x33, 0x99, 0x99 },
            { 0x00, 0x33, 0x99, 0xCC },
            { 0x00, 0x33, 0x99, 0xFF },
            { 0x00, 0x33, 0xCC, 0x00 },
            { 0x00, 0x33, 0xCC, 0x33 },
            { 0x00, 0x33, 0xCC, 0x66 },
            { 0x00, 0x33, 0xCC, 0x99 },
            { 0x00, 0x33, 0xCC, 0xCC },
            { 0x00, 0x33, 0xCC, 0xFF },
            { 0x00, 0x33, 0xFF, 0x00 },
            { 0x00, 0x33, 0xFF, 0x33 },
            { 0x00, 0x33, 0xFF, 0x66 },
            { 0x00, 0x33, 0xFF, 0x99 },
            { 0x00, 0x33, 0xFF, 0xCC },
            { 0x00, 0x33, 0xFF, 0xFF },
            { 0x00, 0x66, 0x00, 0x00 },
            { 0x00, 0x66, 0x00, 0x33 },
            { 0x00, 0x66, 0x00, 0x66 },
            { 0x00, 0x66, 0x00, 0x99 },
            { 0x00, 0x66, 0x00, 0xCC },
            { 0x00, 0x66, 0x00, 0xFF },
            { 0x00, 0x66, 0x33, 0x00 },
            { 0x00, 0x66, 0x33, 0x33 },
            { 0x00, 0x66, 0x33, 0x66 },
            { 0x00, 0x66, 0x33, 0x99 },
            { 0x00, 0x66, 0x33, 0xCC },
            { 0x00, 0x66, 0x33, 0xFF },
            { 0x00, 0x66, 0x66, 0x00 },
            { 0x00, 0x66, 0x66, 0x33 },
            { 0x00, 0x66, 0x66, 0x66 },
            { 0x00, 0x66, 0x66, 0x99 },
            { 0x00, 0x66, 0x66, 0xCC },
            { 0x00, 0x66, 0x66, 0xFF },
            { 0x00, 0x66, 0x99, 0x00 },
            { 0x00, 0x66, 0x99, 0x33 },
            { 0x00, 0x66, 0x99, 0x66 },
            { 0x00, 0x66, 0x99, 0x99 },
            { 0x00, 0x66, 0x99, 0xCC },
            { 0x00, 0x66, 0x99, 0xFF },
            { 0x00, 0x66, 0xCC, 0x00 },
            { 0x00, 0x66, 0xCC, 0x33 },
            { 0x00, 0x66, 0xCC, 0x66 },
            { 0x00, 0x66, 0xCC, 0x99 },
            { 0x00, 0x66, 0xCC, 0xCC },
            { 0x00, 0x66, 0xCC, 0xFF },
            { 0x00, 0x66, 0xFF, 0x00 },
            { 0x00, 0x66, 0xFF, 0x33 },
            { 0x00, 0x66, 0xFF, 0x66 },
            { 0x00, 0x66, 0xFF, 0x99 },
            { 0x00, 0x66, 0xFF, 0xCC },
            { 0x00, 0x66, 0xFF, 0xFF },
            { 0x00, 0x99, 0x00, 0x00 },
            { 0x00, 0x99, 0x00, 0x33 },
            { 0x00, 0x99, 0x00, 0x66 },
            { 0x00, 0x99, 0x00, 0x99 },
            { 0x00, 0x99, 0x00, 0xCC },
            { 0x00, 0x99, 0x00, 0xFF },
            { 0x00, 0x99, 0x33, 0x00 },
            { 0x00, 0x99, 0x33, 0x33 },
            { 0x00, 0x99, 0x33, 0x66 },
            { 0x00, 0x99, 0x33, 0x99 },
            { 0x00, 0x99, 0x33, 0xCC },
            { 0x00, 0x99, 0x33, 0xFF },
            { 0x00, 0x99, 0x66, 0x00 },
            { 0x00, 0x99, 0x66, 0x33 },
            { 0x00, 0x99, 0x66, 0x66 },
            { 0x00, 0x99, 0x66, 0x99 },
            { 0x00, 0x99, 0x66, 0xCC },
            { 0x00, 0x99, 0x66, 0xFF },
            { 0x00, 0x99, 0x99, 0x00 },
            { 0x00, 0x99, 0x99, 0x33 },
            { 0x00, 0x99, 0x99, 0x66 },
            { 0x00, 0x99, 0x99, 0x99 },
            { 0x00, 0x99, 0x99, 0xCC },
            { 0x00, 0x99, 0x99, 0xFF },
            { 0x00, 0x99, 0xCC, 0x00 },
            { 0x00, 0x99, 0xCC, 0x33 },
            { 0x00, 0x99, 0xCC, 0x66 },
            { 0x00, 0x99, 0xCC, 0x99 },
            { 0x00, 0x99, 0xCC, 0xCC },
            { 0x00, 0x99, 0xCC, 0xFF },
            { 0x00, 0x99, 0xFF, 0x00 },
            { 0x00, 0x99, 0xFF, 0x33 },
            { 0x00, 0x99, 0xFF, 0x66 },
            { 0x00, 0x99, 0xFF, 0x99 },
            { 0x00, 0x99, 0xFF, 0xCC },
            { 0x00, 0x99, 0xFF, 0xFF },
            { 0x00, 0xCC, 0x00, 0x00 },
            { 0x00, 0xCC, 0x00, 0x33 },
            { 0x00, 0xCC, 0x00, 0x66 },
            { 0x00, 0xCC, 0x00, 0x99 },
            { 0x00, 0xCC, 0x00, 0xCC },
            { 0x00, 0xCC, 0x00, 0xFF },
            { 0x00, 0xCC, 0x33, 0x00 },
            { 0x00, 0xCC, 0x33, 0x33 },
            { 0x00, 0xCC, 0x33, 0x66 },
            { 0x00, 0xCC, 0x33, 0x99 },
            { 0x00, 0xCC, 0x33, 0xCC },
            { 0x00, 0xCC, 0x33, 0xFF },
            { 0x00, 0xCC, 0x66, 0x00 },
            { 0x00, 0xCC, 0x66, 0x33 },
            { 0x00, 0xCC, 0x66, 0x66 },
            { 0x00, 0xCC, 0x66, 0x99 },
            { 0x00, 0xCC, 0x66, 0xCC },
            { 0x00, 0xCC, 0x66, 0xFF },
            { 0x00, 0xCC, 0x99, 0x00 },
            { 0x00, 0xCC, 0x99, 0x33 },
            { 0x00, 0xCC, 0x99, 0x66 },
            { 0x00, 0xCC, 0x99, 0x99 },
            { 0x00, 0xCC, 0x99, 0xCC },
            { 0x00, 0xCC, 0x99, 0xFF },
            { 0x00, 0xCC, 0xCC, 0x00 },
            { 0x00, 0xCC, 0xCC, 0x33 },
            { 0x00, 0xCC, 0xCC, 0x66 },
            { 0x00, 0xCC, 0xCC, 0x99 },
            { 0x00, 0xCC, 0xCC, 0xCC },
            { 0x00, 0xCC, 0xCC, 0xFF },
            { 0x00, 0xCC, 0xFF, 0x00 },
            { 0x00, 0xCC, 0xFF, 0x33 },
            { 0x00, 0xCC, 0xFF, 0x66 },
            { 0x00, 0xCC, 0xFF, 0x99 },
            { 0x00, 0xCC, 0xFF, 0xCC },
            { 0x00, 0xCC, 0xFF, 0xFF },
            { 0x00, 0xFF, 0x00, 0x00 },
            { 0x00, 0xFF, 0x00, 0x33 },
            { 0x00, 0xFF, 0x00, 0x66 },
            { 0x00, 0xFF, 0x00, 0x99 },
            { 0x00, 0xFF, 0x00, 0xCC },
            { 0x00, 0xFF, 0x00, 0xFF },
            { 0x00, 0xFF, 0x33, 0x00 },
            { 0x00, 0xFF, 0x33, 0x33 },
            { 0x00, 0xFF, 0x33, 0x66 },
            { 0x00, 0xFF, 0x33, 0x99 },
            { 0x00, 0xFF, 0x33, 0xCC },
            { 0x00, 0xFF, 0x33, 0xFF },
            { 0x00, 0xFF, 0x66, 0x00 },
            { 0x00, 0xFF, 0x66, 0x33 },
            { 0x00, 0xFF, 0x66, 0x66 },
            { 0x00, 0xFF, 0x66, 0x99 },
            { 0x00, 0xFF, 0x66, 0xCC },
            { 0x00, 0xFF, 0x66, 0xFF },
            { 0x00, 0xFF, 0x99, 0x00 },
            { 0x00, 0xFF, 0x99, 0x33 },
            { 0x00, 0xFF, 0x99, 0x66 },
            { 0x00, 0xFF, 0x99, 0x99 },
            { 0x00, 0xFF, 0x99, 0xCC },
            { 0x00, 0xFF, 0x99, 0xFF },
            { 0x00, 0xFF, 0xCC, 0x00 },
            { 0x00, 0xFF, 0xCC, 0x33 },
            { 0x00, 0xFF, 0xCC, 0x66 },
            { 0x00, 0xFF, 0xCC, 0x99 },
            { 0x00, 0xFF, 0xCC, 0xCC },
            { 0x00, 0xFF, 0xCC, 0xFF },
            { 0x00, 0xFF, 0xFF, 0x00 },
            { 0x00, 0xFF, 0xFF, 0x33 },
            { 0x00, 0xFF, 0xFF, 0x66 },
            { 0x00, 0xFF, 0xFF, 0x99 },
            { 0x00, 0xFF, 0xFF, 0xCC },
            { 0x00, 0xFF, 0xFF, 0xFF }
        };

        #endregion pal_8bit_WebSafe

        #region pal_4bit_Windows

        /// <summary>
        /// Windowsシステム準拠4bitパレット
        /// </summary>
        protected static byte[,] pal_4bit_Windows =
        {
            { 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x80, 0x00, 0x00 },
            { 0x00, 0x00, 0x80, 0x00 },
            { 0x00, 0x80, 0x80, 0x00 },
            { 0x00, 0x00, 0x00, 0x80 },
            { 0x00, 0x80, 0x00, 0x80 },
            { 0x00, 0x00, 0x80, 0x80 },
            { 0x00, 0x80, 0x80, 0x80 },
            { 0x00, 0xC0, 0xC0, 0xC0 },
            { 0x00, 0xFF, 0x00, 0x00 },
            { 0x00, 0x00, 0xFF, 0x00 },
            { 0x00, 0xFF, 0xFF, 0x00 },
            { 0x00, 0x00, 0x00, 0xFF },
            { 0x00, 0xFF, 0x00, 0xFF },
            { 0x00, 0x00, 0xFF, 0xFF },
            { 0x00, 0xFF, 0xFF, 0xFF }
        };

        #endregion pal_4bit_Windows

        #region pal_1bit

        /// <summary>
        /// 1bitパレット
        /// </summary>
        protected static byte[,] pal_1bit =
        {
            { 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0xFF, 0xFF, 0xFF }
        };

        #endregion pal_1bit

        /// <summary>
        /// 色数
        /// </summary>
        public EDepth Depth
        {
            get { return this.depth; }
            set { this.depth = value; }
        }

        /// <summary>
        /// パレット種別
        /// </summary>
        public EPalleteType PalleteType
        {
            get { return this.palleteType; }
            set { this.palleteType = value; }
        }

        /// <summary>
        /// カスタムパレット
        /// </summary>
        public byte[,] CustomPallete
        {
            get { return this.customPallete; }
            set { this.customPallete = value; }
        }

        /// <summary>
        /// 誤差拡散
        /// </summary>
        public bool ErrorDiffusion
        {
            get { return this.errorDiffusion; }
            set { this.errorDiffusion = value; }
        }

        /// <summary>
        /// 透過しきい値
        /// </summary>
        public byte TransparentThreshold
        {
            get { return this.transparentThreshold; }
            set { this.transparentThreshold = value; }
        }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public ColorQuantizer()
        {
            this.depth = EDepth.DEPTH_8BIT;
            this.palleteType = EPalleteType.SYS_WIN;
            this.errorDiffusion = true;
            this.customPallete = pal_8bit_Sys_Win;
            this.transparentThreshold = 128;
        }

        /// <summary>
        /// 32bitカラーピクセル取得(Color構造体)
        /// </summary>
        /// <param name="aBitmapData">入力BitmapData</param>
        /// <param name="x">X座標</param>
        /// <param name="y">Y座標</param>
        /// <returns>取得した色情報のColor構造体を返す</returns>
        protected Color GetPixel32bitColor(BitmapData aBitmapData, int aX, int aY)
        {
            if (aBitmapData == null)
            {
                return Color.Black;
            }

            IntPtr adr = aBitmapData.Scan0;
            int pos = aX * 4 + aBitmapData.Stride * aY;
            byte b = Marshal.ReadByte(adr, pos + 0);
            byte g = Marshal.ReadByte(adr, pos + 1);
            byte r = Marshal.ReadByte(adr, pos + 2);
            byte a = Marshal.ReadByte(adr, pos + 3);
            return Color.FromArgb(a, r, g, b);
        }

        /// <summary>
        /// 32bitカラーピクセル設定(Color構造体)
        /// </summary>
        /// <param name="aBitmapData">出力BitmapData</param>
        /// <param name="x">X座標</param>
        /// <param name="y">Y座標</param>
        /// <param name="aColor">書き込む色情報のColor構造体</param>
        protected void SetPixel32bitColor(BitmapData aBitmapData, int aX, int aY, Color aColor)
        {
            if (aBitmapData == null)
            {
                return;
            }

            // Bitmap処理の高速化を開始している場合はBitmapメモリへの直接アクセス
            IntPtr adr = aBitmapData.Scan0;
            int pos = aX * 4 + aBitmapData.Stride * aY;
            Marshal.WriteByte(adr, pos + 0, aColor.B);
            Marshal.WriteByte(adr, pos + 1, aColor.G);
            Marshal.WriteByte(adr, pos + 2, aColor.R);
            Marshal.WriteByte(adr, pos + 3, aColor.A);
        }

        /// <summary>
        /// 8bitインデックスカラーピクセル設定
        /// </summary>
        /// <param name="aBitmapData">出力BitmapData</param>
        /// <param name="x">X座標</param>
        /// <param name="y">Y座標</param>
        /// <param name="aColor">書き込む色情報のインデックスカラー値</param>
        protected void SetPixel8bitIndex(BitmapData aBitmapData, int aX, int aY, byte aIndex)
        {
            if (aBitmapData == null)
            {
                return;
            }

            IntPtr adr = aBitmapData.Scan0;
            int pos = aX + aBitmapData.Stride * aY;
            Marshal.WriteByte(adr, pos + 0, aIndex);
        }

        /// <summary>
        /// 4bitインデックスカラーピクセル設定
        /// </summary>
        /// <param name="aBitmapData">出力BitmapData</param>
        /// <param name="x">X座標</param>
        /// <param name="y">Y座標</param>
        /// <param name="aColor">書き込む色情報のインデックスカラー値</param>
        protected void SetPixel4bitIndex(BitmapData aBitmapData, int aX, int aY, byte aIndex)
        {
            if (aBitmapData == null)
            {
                return;
            }

            int shift = (1 - (aX % 2)) << 2;

            if (4 == shift)
            {
                bitBuffer = 0x00;
            }

            bitBuffer |= (byte)((aIndex << shift) & (0x0F << shift));

            IntPtr adr = aBitmapData.Scan0;
            int pos = (aX / 2) + aBitmapData.Stride * aY;
            Marshal.WriteByte(adr, pos + 0, bitBuffer);
        }

        /// <summary>
        /// 1bitインデックスカラーピクセル設定
        /// </summary>
        /// <param name="aBitmapData">出力BitmapData</param>
        /// <param name="x">X座標</param>
        /// <param name="y">Y座標</param>
        /// <param name="aColor">書き込む色情報のインデックスカラー値</param>
        protected void SetPixel1bitIndex(BitmapData aBitmapData, int aX, int aY, byte aIndex)
        {
            if (aBitmapData == null)
            {
                return;
            }

            int shift = 7 - (aX % 8);

            if (7 == shift)
            {
                bitBuffer = 0;
            }

            bitBuffer |= (byte)((aIndex << shift) & (0x01 << shift));

            IntPtr adr = aBitmapData.Scan0;
            int pos = (aX / 8) + aBitmapData.Stride * aY;
            Marshal.WriteByte(adr, pos + 0, bitBuffer);
        }

        /// <summary>
        /// 減色
        /// </summary>
        /// <param name="srcBitmap">入力画像Bitmap</param>
        /// <param name="dstBitmap">出力画像Bitmap</param>
        /// <returns>正常に処理できた場合、trueを返す</returns>
        public bool ReduceColor(Bitmap srcBitmap, out Bitmap dstBitmap)
        {
            if (srcBitmap == null)
            {
                dstBitmap = null;
                return false;
            }

            // 32bitカラーの場合
            if (this.depth == EDepth.DEPTH_32BIT)
            {
                // 変換不要
                dstBitmap = (Bitmap)srcBitmap.Clone();
                return true;
            }

            dstBitmap = new Bitmap(srcBitmap.Width, srcBitmap.Height, getPixelFormat());

            if ((this.depth == EDepth.DEPTH_24BIT) || (this.depth == EDepth.DEPTH_16BIT))
            {
                Graphics g = Graphics.FromImage(dstBitmap);
                g.DrawImage(srcBitmap, 0, 0, srcBitmap.Width, srcBitmap.Height);
                return true;
            }

            this.initPallete();
            this.initSetPixelIndexDelegate();
            this.toIndexColor(srcBitmap, dstBitmap);
            this.updatePallete(dstBitmap);

            return true;
        }

        /// <summary>
        /// アルファマスク取得
        /// </summary>
        /// <param name="srcBitmap">入力画像Bitmap</param>
        /// <param name="dstBitmap">出力画像Bitmap</param>
        /// <returns>正常に取得できた場合、trueを返す</returns>
        public bool GetAlphaMask(Bitmap srcBitmap, out Bitmap dstBitmap)
        {
            if (srcBitmap == null)
            {
                dstBitmap = null;
                return false;
            }

            dstBitmap = new Bitmap(srcBitmap.Width, srcBitmap.Height, PixelFormat.Format1bppIndexed);
            this.ToAlphaMask(srcBitmap, dstBitmap);

            return true;
        }

        /// <summary>
        /// 色数からPixelFormatを取得
        /// </summary>
        /// <returns>取得したPixelFormatを返す</returns>
        protected PixelFormat getPixelFormat()
        {
            PixelFormat pixelFormat;
            switch (this.depth)
            {
                case EDepth.DEPTH_32BIT:
                    pixelFormat = PixelFormat.Format32bppArgb;
                    break;

                case EDepth.DEPTH_24BIT:
                    pixelFormat = PixelFormat.Format24bppRgb;
                    break;

                case EDepth.DEPTH_16BIT:
                    pixelFormat = PixelFormat.Format16bppRgb565;
                    break;

                case EDepth.DEPTH_8BIT:
                    pixelFormat = PixelFormat.Format8bppIndexed;
                    break;

                case EDepth.DEPTH_4BIT:
                    pixelFormat = PixelFormat.Format4bppIndexed;
                    break;

                case EDepth.DEPTH_1BIT:
                    pixelFormat = PixelFormat.Format1bppIndexed;
                    break;

                default:
                    pixelFormat = PixelFormat.Format1bppIndexed;
                    break;
            }

            return pixelFormat;
        }

        /// <summary>
        /// パレット初期化
        /// </summary>
        protected void initPallete()
        {
            switch (this.depth)
            {
                case EDepth.DEPTH_8BIT:
                    switch (this.palleteType)
                    {
                        case EPalleteType.SYS_WIN:
                            pal_proc = pal_8bit_Sys_Win;
                            break;

                        case EPalleteType.SYS_WIN_PAINT:
                            pal_proc = pal_8bit_Sys_Win_Paint;
                            break;

                        case EPalleteType.WEB_SAFE:
                            pal_proc = pal_8bit_WebSafe;
                            break;

                        case EPalleteType.CUSTOM:
                            pal_proc = this.customPallete;
                            break;

                        default:
                            pal_proc = pal_1bit;
                            break;
                    }
                    break;

                case EDepth.DEPTH_4BIT:
                    pal_proc = pal_4bit_Windows;
                    break;

                case EDepth.DEPTH_1BIT:
                    pal_proc = pal_1bit;
                    break;

                default:
                    pal_proc = pal_1bit;
                    break;
            }

            paletteLength = pal_proc.Length / 4;
        }

        /// <summary>
        /// インデックスカラーピクセル設定のメソッドを初期化する
        /// </summary>
        protected void initSetPixelIndexDelegate()
        {
            switch (this.depth)
            {
                case EDepth.DEPTH_8BIT:
                    setPixelIndexDelegate = SetPixel8bitIndex;
                    break;

                case EDepth.DEPTH_4BIT:
                    setPixelIndexDelegate = SetPixel4bitIndex;
                    break;

                case EDepth.DEPTH_1BIT:
                    setPixelIndexDelegate = SetPixel1bitIndex;
                    break;

                default:
                    setPixelIndexDelegate = SetPixel1bitIndex;
                    break;
            }
        }

        /// <summary>
        /// インデックスカラーに変換
        /// </summary>
        /// <param name="srcBitmap">入力画像Bitmap</param>
        /// <param name="dstBitmap">出力画像Bitmap</param>
        protected void toIndexColor(Bitmap srcBitmap, Bitmap dstBitmap)
        {
            Bitmap bufBitmap = (Bitmap)srcBitmap.Clone();
            Rectangle bitmapRectangle = new Rectangle(0, 0, bufBitmap.Width, bufBitmap.Height);
            BitmapData bufBitmapData = bufBitmap.LockBits(bitmapRectangle, ImageLockMode.ReadOnly,
                bufBitmap.PixelFormat);
            BitmapData dstBitmapData = dstBitmap.LockBits(bitmapRectangle, ImageLockMode.ReadWrite,
                dstBitmap.PixelFormat);

            Color srcColor;
            byte indexColor;

            for (int y = 0; y < bufBitmapData.Height; y++)
            {
                for (int x = 0; x < bufBitmapData.Width; x++)
                {
                    srcColor = GetPixel32bitColor(bufBitmapData, x, y);
                    indexColor = ArgbColorToIndex(srcColor);

                    if (this.errorDiffusion)
                    {
                        this.ErrorDiffusion_FloydSteinberg(bufBitmapData, x, y, srcColor, indexColor);
                    }

                    setPixelIndexDelegate(dstBitmapData, x, y, indexColor);
                }
            }

            dstBitmap.UnlockBits(dstBitmapData);
            bufBitmap.UnlockBits(bufBitmapData);
            bufBitmap.Dispose();
        }

        /// <summary>
        /// アルファマスク画像に変換
        /// </summary>
        /// <param name="srcBitmap">入力画像Bitmap</param>
        /// <param name="dstBitmap">出力画像Bitmap</param>
        protected void ToAlphaMask(Bitmap srcBitmap, Bitmap dstBitmap)
        {
            Bitmap bufBitmap = (Bitmap)srcBitmap.Clone();
            Rectangle bitmapRectangle = new Rectangle(0, 0, bufBitmap.Width, bufBitmap.Height);
            BitmapData bufBitmapData = bufBitmap.LockBits(bitmapRectangle, ImageLockMode.ReadOnly,
                bufBitmap.PixelFormat);
            BitmapData dstBitmapData = dstBitmap.LockBits(bitmapRectangle, ImageLockMode.ReadWrite,
                dstBitmap.PixelFormat);

            Color srcColor;
            byte indexColor;

            for (int y = 0; y < bufBitmapData.Height; y++)
            {
                for (int x = 0; x < bufBitmapData.Width; x++)
                {
                    srcColor = GetPixel32bitColor(bufBitmapData, x, y);
                    if (srcColor.A < this.transparentThreshold)
                    {
                        indexColor = 1;
                    }
                    else
                    {
                        indexColor = 0;
                    }

                    SetPixel1bitIndex(dstBitmapData, x, bufBitmapData.Height - (y + 1), indexColor);
                }
            }

            dstBitmap.UnlockBits(dstBitmapData);
            bufBitmap.UnlockBits(bufBitmapData);
            bufBitmap.Dispose();
        }

        protected void updatePallete(Bitmap dstBitmap)
        {
            ColorPalette pal = dstBitmap.Palette;

            for (int i = 0; i < paletteLength; i++)
            {
                pal.Entries[i] = Color.FromArgb(
                    pal_proc[i, 1],
                    pal_proc[i, 2],
                    pal_proc[i, 3]);
            }
            for (int i = paletteLength; i < pal.Entries.Length; i++)
            {
                pal.Entries[i] = Color.FromArgb(
                    paletteLength,
                    paletteLength,
                    paletteLength);
            }

            dstBitmap.Palette = pal;
        }

        protected byte ArgbColorToIndex(Color argb)
        {
            int min = 0;
            int len = 0;
            int index = 0;

            int a = argb.A;
            int r = argb.R;
            int g = argb.G;
            int b = argb.B;

            int lenR;
            int lenG;
            int lenB;

            if (a < this.transparentThreshold)
            {
                return 0;
            }

            lenR = pal_proc[0, 1] - r;
            lenG = pal_proc[0, 2] - g;
            lenB = pal_proc[0, 3] - b;

            min = ((lenR ^ (lenR >> 31)) - (lenR >> 31)) +
                  ((lenG ^ (lenG >> 31)) - (lenG >> 31)) +
                  ((lenB ^ (lenB >> 31)) - (lenB >> 31));

            for (int i = 1; i < paletteLength; i++)
            {
                lenR = pal_proc[i, 1] - r;
                lenG = pal_proc[i, 2] - g;
                lenB = pal_proc[i, 3] - b;

                len = ((lenR ^ (lenR >> 31)) - (lenR >> 31)) +
                      ((lenG ^ (lenG >> 31)) - (lenG >> 31)) +
                      ((lenB ^ (lenB >> 31)) - (lenB >> 31));

                if (min > len)
                {
                    min = len;
                    index = i;
                }
            }

            return (byte)index;
        }

        protected void ErrorDiffusion_FloydSteinberg(BitmapData data, int srcX, int srcY, Color srcArgb, byte dstIndex)
        {
            IntPtr srcAdr = data.Scan0;
            int posCurrent = (srcX * 4 + (data.Stride * srcY));
            int pos1Down = posCurrent + data.Stride;
            int errR;
            int errG;
            int errB;

            errR = srcArgb.R - pal_proc[dstIndex, 1];
            errG = srcArgb.G - pal_proc[dstIndex, 2];
            errB = srcArgb.B - pal_proc[dstIndex, 3];

            if (srcX < data.Width - 1)
            {
                this.FloydSteinberg_Burkes_Core(srcAdr, posCurrent + 4, 7, errR, errG, errB);
            }

            if (srcY < data.Height - 1)
            {
                if (srcX != 0)
                {
                    this.FloydSteinberg_Burkes_Core(srcAdr, pos1Down - 4, 3, errR, errG, errB);
                }

                this.FloydSteinberg_Burkes_Core(srcAdr, pos1Down, 5, errR, errG, errB);

                if (srcX < data.Width - 1)
                {
                    this.FloydSteinberg_Burkes_Core(srcAdr, pos1Down + 4, 1, errR, errG, errB);
                }
            }
        }

        protected void FloydSteinberg_Burkes_Core(IntPtr srcAdr, int targetPos, int value, int errR, int errG, int errB)
        {
            int dstR = Marshal.ReadByte(srcAdr, targetPos + 2) + ((value * errR) >> 4);
            int dstG = Marshal.ReadByte(srcAdr, targetPos + 1) + ((value * errG) >> 4);
            int dstB = Marshal.ReadByte(srcAdr, targetPos + 0) + ((value * errB) >> 4);

            if (dstR > 255) dstR = 255;
            else if (dstR < 0) dstR = 0;
            Marshal.WriteByte(srcAdr, targetPos + 2, (byte)dstR);

            if (dstG > 255) dstG = 255;
            else if (dstG < 0) dstG = 0;
            Marshal.WriteByte(srcAdr, targetPos + 1, (byte)dstG);

            if (dstB > 255) dstB = 255;
            else if (dstB < 0) dstB = 0;
            Marshal.WriteByte(srcAdr, targetPos + 0, (byte)dstB);
        }
    }
}